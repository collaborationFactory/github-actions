name: Frontend Code Quality Workflow

on:
  workflow_call:
    secrets:
      SONAR_CLOUD_TOKEN:
        required: false
      SONAR_CLOUD_ORG:
        required: false
        description: "SonarCloud organization key, e.g., 'my-org'"
      SONAR_CLOUD_PROJECT_KEY:
        required: false
        description: "SonarCloud project key, e.g., 'my-project'"
      SONAR_PROPERTIES:
        required: false
        description: "Additional sonar-project.properties content"

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ 'test' ]
        jobIndex: [ 1, 2, 3,4 ]
      fail-fast: false # Ensure all jobs run even if one fails
    env:
      jobCount: 4
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22.15.0
      - name: Cache Node Modules
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Formatter
        run: npx nx format:check --base=origin/${{ github.event.pull_request.base.ref }}

      - name: Linter
        run: npx nx affected --target=lint --parallel --configuration=dev --base=origin/${{ github.event.pull_request.base.ref }}

      - name: Fetch base branch
        run: git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }} || true

      - name: Unit Tests
        uses: collaborationFactory/github-actions/.github/actions/run-many@poc/code-coverage-in-code-quality-pr-pipeline
        with:
          target: ${{ matrix.target }}
          jobIndex: ${{ matrix.jobIndex }}
          jobCount: ${{ env.jobCount }}
          base: ${{ github.event.pull_request.base.ref }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Display structure of downloaded files
        run: find coverage/ -name "*.info"

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.jobIndex }}
          path: coverage/
          retention-days: 7

  sonar:
    name: SonarCloud
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Check if SONAR_CLOUD_TOKEN exists
        id: check-secret
        run: |
          if [ -n "${{ secrets.SONAR_CLOUD_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: false

      - name: Skip SonarCloud steps if no token
        if: steps.check-secret.outputs.has_token == 'false'
        run: |
          echo "SONAR_CLOUD_TOKEN is not set. Skipping SonarCloud analysis."
          exit 0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Write sonar-project.properties
        run: |
          echo "sonar.organization=${{ secrets.SONAR_CLOUD_ORG }}" >> sonar-project.properties
          echo "sonar.projectKey=${{ secrets.SONAR_CLOUD_PROJECT_KEY }}" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
          echo "sonar.tests=." >> sonar-project.properties
          echo "sonar.test.inclusions=**/*.spec.ts,**/*.test.ts,**/*.spec.tsx,**/*.test.tsx" >> sonar-project.properties
          echo "sonar.javascript.lcov.reportPaths=./coverage/lcov.info" >> sonar-project.properties
          echo "sonar.testExecutionReportPaths=./reports/**/junit.xml" >> sonar-project.properties
          echo "sonar.test.exclusions=**/node_modules/**,**/test/**" >> sonar-project.properties
          echo "sonar.verbose=true" >> sonar-project.properties
          if [ -n "${{ secrets.SONAR_PROPERTIES }}" ]; then
            echo "${{ secrets.SONAR_PROPERTIES }}" >> sonar-project.properties
          fi
          cat sonar-project.properties

      - name: download coverage report
        uses: actions/download-artifact@v5
        with:
          path: coverage/
          pattern: coverage-*
          merge-multiple: true

      - name: download junit report
        uses: actions/download-artifact@v5
        with:
          path: reports/
          pattern: junit-*
          merge-multiple: true

      - name: Display structure of downloaded files
        run: find coverage/ -name "*.info"

      - name: Merge matrix coverage reports
        run: npx lcov-result-merger ./coverage/**/lcov*.info ./coverage/lcov.info

      - name: Normalize LCOV paths for Linux
        run: |
          if [ -f "./coverage/lcov.info" ]; then
            sed -i 's|\\|/|g' ./coverage/lcov.info
            echo "Normalized LCOV paths to Unix format"
          fi

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          retention-days: 7

      - name: Upload Junit Reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/
          retention-days: 7

      - name: Dump sonar-project.properties
        run: cat sonar-project.properties

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
